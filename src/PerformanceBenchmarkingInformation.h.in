/*=========================================================================
 *
 *  Copyright NumFOCUS
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         https://www.apache.org/licenses/LICENSE-2.0.txt
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *=========================================================================*/
#ifndef PerformanceBenchmarkingInformation_h
#define PerformanceBenchmarkingInformation_h

#include "itkMacro.h"
#include "itkObject.h"
#ifndef __wasi__
#  include <mutex>
#endif

// A configure time introspection for
#cmakedefine ITK_HAS_INFORMATION_H
#ifdef ITK_HAS_INFORMATION_H
#  include <itkBuildInformation.h>
#endif

#include "PerformanceBenchmarkingExport.h"


namespace itk
{
/** \class PerformanceBenchmarkingInformation
 * \brief Static information about this build of the PerformanceBenchmarks
 *
 * This class provides a singleton interface to a static
 * std::map< std::string, std::string> of key value pairs
 * that describe this version of the PerformanceBenchmarks.
 *
 * Values in the map provide information about
 * the PerformanceBenchmarks (i.e. its version, the build options,
 * configuration options, the home URL for the project,
 * and other static information) that can be gathered
 * at configuration time.
 *
 * \ingroup PerformanceBenchmarking
 *
 */
class PerformanceBenchmarking_EXPORT PerformanceBenchmarkingInformation final : public itk::Object
{
public:
  /** Standard class type aliases. */
  using Self = PerformanceBenchmarkingInformation;
  using Pointer = itk::SmartPointer<Self>;
  using ConstPointer = itk::SmartPointer<const Self>;
  using MapKeyType = std::string;
  using MapValueType = std::string;
  using MapValueDescriptionType = MapValueType;

private:
  /**
   * \class InformationValueType
   * An inner struct to organize dictionary values with descriptions
   * \ingroup PerformanceBenchmarking
   */
  class InformationValueType
  {
  public:
    InformationValueType() = default;
    InformationValueType(const InformationValueType &) = default;
    InformationValueType(InformationValueType &&) = default;

    const MapValueType            m_Value;
    const MapValueDescriptionType m_Description;
  };

public:
  using MapStorageType = InformationValueType;
  using MapType = std::map<MapKeyType, MapStorageType>;

  /** Run-time type information (and related methods). */
  itkTypeMacro(PerformanceBenchmarkingInformation, Object);

  /** Returns the global instance */
  static Pointer
  New();

  /** Returns the global singleton instance of the PerformanceBenchmarkingInformation */
  static Pointer
  GetInstance();
  static const MapType &
  GetMap();
  static const MapValueType
  GetValue(const MapKeyType &&);
  static const MapValueDescriptionType
  GetDescription(const MapKeyType &&);
  static const std::vector<MapKeyType>
  GetAllKeys();

private:
  ITK_DISALLOW_COPY_AND_MOVE(PerformanceBenchmarkingInformation);

  PerformanceBenchmarkingInformation();

  /** To lock on the internal variables */
#ifndef __wasi__
  static std::mutex m_Mutex;
#endif
  static Pointer m_InformationInstance;
  static MapType m_Map;
}; // end of class

} // end namespace itk
#endif
